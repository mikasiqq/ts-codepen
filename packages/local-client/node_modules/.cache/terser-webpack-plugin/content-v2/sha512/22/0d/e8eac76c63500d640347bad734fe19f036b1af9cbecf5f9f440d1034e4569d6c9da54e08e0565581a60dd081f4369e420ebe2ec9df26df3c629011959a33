{"code":"(this[\"webpackJsonpts-codepen\"]=this[\"webpackJsonpts-codepen\"]||[]).push([[462],{638:function(e,s){!function(e){var s=e.util.clone(e.languages.typescript);e.languages.tsx=e.languages.extend(\"jsx\",s);var t=e.languages.tsx.tag;t.pattern=RegExp(/(^|[^\\w$]|(?=<\\/))/.source+\"(?:\"+t.pattern.source+\")\",t.pattern.flags),t.lookbehind=!0}(Prism)}}]);","name":"static/js/462.03ecce67.chunk.js","map":{"version":3,"names":["this","push","module","exports","Prism","typescript","util","clone","languages","tsx","extend","tag","pattern","RegExp","source","flags","lookbehind"],"sources":["static/js/462.03ecce67.chunk.js"],"mappings":"CAACA,KAAK,0BAA4BA,KAAK,2BAA6B,IAAIC,KAAK,CAAC,CAAC,KAAK,CAE9E,IACA,SAAUC,EAAQC,IAExB,SAAWC,GACT,IAAIC,EAAaD,EAAME,KAAKC,MAAMH,EAAMI,UAAUH,YAClDD,EAAMI,UAAUC,IAAML,EAAMI,UAAUE,OAAO,MAAOL,GAKpD,IAAIM,EAAMP,EAAMI,UAAUC,IAAIE,IAC9BA,EAAIC,QAAUC,OAAO,qBAAqBC,OAAS,MAAQH,EAAIC,QAAQE,OAAS,IAAKH,EAAIC,QAAQG,OACjGJ,EAAIK,YAAa,CAClB,CAVD,CAUGZ,MAEI"},"input":"(this[\"webpackJsonpts-codepen\"] = this[\"webpackJsonpts-codepen\"] || []).push([[462],{\n\n/***/ 638:\n/***/ (function(module, exports) {\n\n(function (Prism) {\n  var typescript = Prism.util.clone(Prism.languages.typescript);\n  Prism.languages.tsx = Prism.languages.extend('jsx', typescript);\n\n  // This will prevent collisions between TSX tags and TS generic types.\n  // Idea by https://github.com/karlhorky\n  // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n  var tag = Prism.languages.tsx.tag;\n  tag.pattern = RegExp(/(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')', tag.pattern.flags);\n  tag.lookbehind = true;\n})(Prism);\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["/Users/gleb/Desktop/study/react/ts-prod/ts-codepen/packages/local-client/node_modules/prismjs/components/prism-tsx.js"],"names":["Prism","typescript","util","clone","languages","tsx","extend","tag","pattern","RegExp","source","flags","lookbehind"],"mappings":";;;;;AAAC,WAAUA,KAAK,EAAE;EACjB,IAAIC,UAAU,GAAGD,KAAK,CAACE,IAAI,CAACC,KAAK,CAACH,KAAK,CAACI,SAAS,CAACH,UAAU,CAAC;EAC7DD,KAAK,CAACI,SAAS,CAACC,GAAG,GAAGL,KAAK,CAACI,SAAS,CAACE,MAAM,CAAC,KAAK,EAAEL,UAAU,CAAC;;EAE/D;EACA;EACA;EACA,IAAIM,GAAG,GAAGP,KAAK,CAACI,SAAS,CAACC,GAAG,CAACE,GAAG;EACjCA,GAAG,CAACC,OAAO,GAAGC,MAAM,CAAC,oBAAoB,CAACC,MAAM,GAAG,KAAK,GAAGH,GAAG,CAACC,OAAO,CAACE,MAAM,GAAG,GAAG,EAAEH,GAAG,CAACC,OAAO,CAACG,KAAK,CAAC;EACvGJ,GAAG,CAACK,UAAU,GAAG,IAAI;AACtB,CAAC,EAACZ,KAAK,CAAC,C","file":"x","sourcesContent":["(function (Prism) {\n\tvar typescript = Prism.util.clone(Prism.languages.typescript);\n\tPrism.languages.tsx = Prism.languages.extend('jsx', typescript);\n\n\t// This will prevent collisions between TSX tags and TS generic types.\n\t// Idea by https://github.com/karlhorky\n\t// Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n\tvar tag = Prism.languages.tsx.tag;\n\ttag.pattern = RegExp(/(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')', tag.pattern.flags);\n\ttag.lookbehind = true;\n}(Prism));\n"]}}