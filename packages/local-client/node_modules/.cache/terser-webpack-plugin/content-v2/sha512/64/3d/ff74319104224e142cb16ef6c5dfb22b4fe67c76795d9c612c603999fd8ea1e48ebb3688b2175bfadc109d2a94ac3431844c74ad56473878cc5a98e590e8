{"code":"(this[\"webpackJsonpts-codepen\"]=this[\"webpackJsonpts-codepen\"]||[]).push([[216],{392:function(e,n){!function(e){var n=e.languages.javadoclike={parameter:{pattern:/(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:param|arg|arguments)\\s+)\\w+/m,lookbehind:!0},keyword:{pattern:/(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,lookbehind:!0},punctuation:/[{}]/};Object.defineProperty(n,\"addSupport\",{value:function(n,a){\"string\"===typeof n&&(n=[n]),n.forEach((function(n){!function(n,a){var t=\"doc-comment\",o=e.languages[n];if(o){var r=o[t];if(!r){var i={};i[t]={pattern:/(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,lookbehind:!0,alias:\"comment\"},r=(o=e.languages.insertBefore(n,\"comment\",i))[t]}if(r instanceof RegExp&&(r=o[t]={pattern:r}),Array.isArray(r))for(var s=0,p=r.length;s<p;s++)r[s]instanceof RegExp&&(r[s]={pattern:r[s]}),a(r[s]);else a(r)}}(n,(function(e){e.inside||(e.inside={}),e.inside.rest=a}))}))}}),n.addSupport([\"java\",\"javascript\",\"php\"],n)}(Prism)}}]);","name":"static/js/216.04f237d4.chunk.js","map":{"version":3,"names":["this","push","module","exports","Prism","javaDocLike","languages","javadoclike","parameter","pattern","lookbehind","keyword","punctuation","Object","defineProperty","value","docLanguage","forEach","lang","callback","tokenName","grammar","token","definition","alias","insertBefore","RegExp","Array","isArray","i","l","length","docCommentSupport","inside","rest","addSupport"],"sources":["static/js/216.04f237d4.chunk.js"],"mappings":"CAACA,KAAK,0BAA4BA,KAAK,2BAA6B,IAAIC,KAAK,CAAC,CAAC,KAAK,CAE9E,IACA,SAAUC,EAAQC,IAExB,SAAWC,GACT,IAAIC,EAAcD,EAAME,UAAUC,YAAc,CAC9CC,UAAa,CACXC,QAAS,iEACTC,YAAY,GAEdC,QAAW,CAGTF,QAAS,wDACTC,YAAY,GAEdE,YAAe,QAkEjBC,OAAOC,eAAeT,EAAa,aAAc,CAC/CU,MAdF,SAAoBT,EAAWU,GACJ,kBAAdV,IACTA,EAAY,CAACA,IAEfA,EAAUW,SAAQ,SAAUC,IAhD9B,SAA2BA,EAAMC,GAC/B,IAAIC,EAAY,cACZC,EAAUjB,EAAME,UAAUY,GAC9B,GAAKG,EAAL,CAGA,IAAIC,EAAQD,EAAQD,GACpB,IAAKE,EAAO,CAEV,IAAIC,EAAa,CAAC,EAClBA,EAAWH,GAAa,CACtBX,QAAS,wCACTC,YAAY,EACZc,MAAO,WAGTF,GADAD,EAAUjB,EAAME,UAAUmB,aAAaP,EAAM,UAAWK,IACxCH,EAClB,CAOA,GANIE,aAAiBI,SAEnBJ,EAAQD,EAAQD,GAAa,CAC3BX,QAASa,IAGTK,MAAMC,QAAQN,GAChB,IAAK,IAAIO,EAAI,EAAGC,EAAIR,EAAMS,OAAQF,EAAIC,EAAGD,IACnCP,EAAMO,aAAcH,SACtBJ,EAAMO,GAAK,CACTpB,QAASa,EAAMO,KAGnBV,EAASG,EAAMO,SAGjBV,EAASG,EA7BX,CA+BF,CAaIU,CAAkBd,GAAM,SAAUT,GAC3BA,EAAQwB,SACXxB,EAAQwB,OAAS,CAAC,GAEpBxB,EAAQwB,OAAOC,KAAOlB,CACxB,GACF,GACF,IAIAX,EAAY8B,WAAW,CAAC,OAAQ,aAAc,OAAQ9B,EACvD,CAlFD,CAkFGD,MAEI"},"input":"(this[\"webpackJsonpts-codepen\"] = this[\"webpackJsonpts-codepen\"] || []).push([[216],{\n\n/***/ 392:\n/***/ (function(module, exports) {\n\n(function (Prism) {\n  var javaDocLike = Prism.languages.javadoclike = {\n    'parameter': {\n      pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:param|arg|arguments)\\s+)\\w+/m,\n      lookbehind: true\n    },\n    'keyword': {\n      // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n      // @word, {@word}\n      pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n      lookbehind: true\n    },\n    'punctuation': /[{}]/\n  };\n\n  /**\n   * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n   *\n   * @param {string} lang the language add doc comment support to.\n   * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n   */\n  function docCommentSupport(lang, callback) {\n    var tokenName = 'doc-comment';\n    var grammar = Prism.languages[lang];\n    if (!grammar) {\n      return;\n    }\n    var token = grammar[tokenName];\n    if (!token) {\n      // add doc comment: /** */\n      var definition = {};\n      definition[tokenName] = {\n        pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n        lookbehind: true,\n        alias: 'comment'\n      };\n      grammar = Prism.languages.insertBefore(lang, 'comment', definition);\n      token = grammar[tokenName];\n    }\n    if (token instanceof RegExp) {\n      // convert regex to object\n      token = grammar[tokenName] = {\n        pattern: token\n      };\n    }\n    if (Array.isArray(token)) {\n      for (var i = 0, l = token.length; i < l; i++) {\n        if (token[i] instanceof RegExp) {\n          token[i] = {\n            pattern: token[i]\n          };\n        }\n        callback(token[i]);\n      }\n    } else {\n      callback(token);\n    }\n  }\n\n  /**\n   * Adds doc-comment support to the given languages for the given documentation language.\n   *\n   * @param {string[]|string} languages\n   * @param {Object} docLanguage\n   */\n  function addSupport(languages, docLanguage) {\n    if (typeof languages === 'string') {\n      languages = [languages];\n    }\n    languages.forEach(function (lang) {\n      docCommentSupport(lang, function (pattern) {\n        if (!pattern.inside) {\n          pattern.inside = {};\n        }\n        pattern.inside.rest = docLanguage;\n      });\n    });\n  }\n  Object.defineProperty(javaDocLike, 'addSupport', {\n    value: addSupport\n  });\n  javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike);\n})(Prism);\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["/Users/gleb/Desktop/study/react/ts-prod/ts-codepen/packages/local-client/node_modules/prismjs/components/prism-javadoclike.js"],"names":["Prism","javaDocLike","languages","javadoclike","pattern","lookbehind","docCommentSupport","lang","callback","tokenName","grammar","token","definition","alias","insertBefore","RegExp","Array","isArray","i","l","length","addSupport","docLanguage","forEach","inside","rest","Object","defineProperty","value"],"mappings":";;;;;AAAC,WAAUA,KAAK,EAAE;EAEjB,IAAIC,WAAW,GAAGD,KAAK,CAACE,SAAS,CAACC,WAAW,GAAG;IAC/C,WAAW,EAAE;MACZC,OAAO,EAAE,gEAAgE;MACzEC,UAAU,EAAE;IACb,CAAC;IACD,SAAS,EAAE;MACV;MACA;MACAD,OAAO,EAAE,uDAAuD;MAChEC,UAAU,EAAE;IACb,CAAC;IACD,aAAa,EAAE;EAChB,CAAC;;EAGD;AACD;AACA;AACA;AACA;AACA;EACC,SAASC,iBAAiB,CAACC,IAAI,EAAEC,QAAQ,EAAE;IAC1C,IAAIC,SAAS,GAAG,aAAa;IAE7B,IAAIC,OAAO,GAAGV,KAAK,CAACE,SAAS,CAACK,IAAI,CAAC;IACnC,IAAI,CAACG,OAAO,EAAE;MACb;IACD;IACA,IAAIC,KAAK,GAAGD,OAAO,CAACD,SAAS,CAAC;IAE9B,IAAI,CAACE,KAAK,EAAE;MACX;MACA,IAAIC,UAAU,GAAG,CAAC,CAAC;MACnBA,UAAU,CAACH,SAAS,CAAC,GAAG;QACvBL,OAAO,EAAE,uCAAuC;QAChDC,UAAU,EAAE,IAAI;QAChBQ,KAAK,EAAE;MACR,CAAC;MAEDH,OAAO,GAAGV,KAAK,CAACE,SAAS,CAACY,YAAY,CAACP,IAAI,EAAE,SAAS,EAAEK,UAAU,CAAC;MACnED,KAAK,GAAGD,OAAO,CAACD,SAAS,CAAC;IAC3B;IAEA,IAAIE,KAAK,YAAYI,MAAM,EAAE;MAAE;MAC9BJ,KAAK,GAAGD,OAAO,CAACD,SAAS,CAAC,GAAG;QAAEL,OAAO,EAAEO;MAAM,CAAC;IAChD;IAEA,IAAIK,KAAK,CAACC,OAAO,CAACN,KAAK,CAAC,EAAE;MACzB,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGR,KAAK,CAACS,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;QAC7C,IAAIP,KAAK,CAACO,CAAC,CAAC,YAAYH,MAAM,EAAE;UAC/BJ,KAAK,CAACO,CAAC,CAAC,GAAG;YAAEd,OAAO,EAAEO,KAAK,CAACO,CAAC;UAAE,CAAC;QACjC;QACAV,QAAQ,CAACG,KAAK,CAACO,CAAC,CAAC,CAAC;MACnB;IACD,CAAC,MAAM;MACNV,QAAQ,CAACG,KAAK,CAAC;IAChB;EACD;;EAEA;AACD;AACA;AACA;AACA;AACA;EACC,SAASU,UAAU,CAACnB,SAAS,EAAEoB,WAAW,EAAE;IAC3C,IAAI,OAAOpB,SAAS,KAAK,QAAQ,EAAE;MAClCA,SAAS,GAAG,CAACA,SAAS,CAAC;IACxB;IAEAA,SAAS,CAACqB,OAAO,CAAC,UAAUhB,IAAI,EAAE;MACjCD,iBAAiB,CAACC,IAAI,EAAE,UAAUH,OAAO,EAAE;QAC1C,IAAI,CAACA,OAAO,CAACoB,MAAM,EAAE;UACpBpB,OAAO,CAACoB,MAAM,GAAG,CAAC,CAAC;QACpB;QACApB,OAAO,CAACoB,MAAM,CAACC,IAAI,GAAGH,WAAW;MAClC,CAAC,CAAC;IACH,CAAC,CAAC;EACH;EAEAI,MAAM,CAACC,cAAc,CAAC1B,WAAW,EAAE,YAAY,EAAE;IAAE2B,KAAK,EAAEP;EAAW,CAAC,CAAC;EAEvEpB,WAAW,CAACoB,UAAU,CAAC,CAAC,MAAM,EAAE,YAAY,EAAE,KAAK,CAAC,EAAEpB,WAAW,CAAC;AAEnE,CAAC,EAACD,KAAK,CAAC,C","file":"x","sourcesContent":["(function (Prism) {\n\n\tvar javaDocLike = Prism.languages.javadoclike = {\n\t\t'parameter': {\n\t\t\tpattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:param|arg|arguments)\\s+)\\w+/m,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'keyword': {\n\t\t\t// keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n\t\t\t// @word, {@word}\n\t\t\tpattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'punctuation': /[{}]/\n\t};\n\n\n\t/**\n\t * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n\t *\n\t * @param {string} lang the language add doc comment support to.\n\t * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n\t */\n\tfunction docCommentSupport(lang, callback) {\n\t\tvar tokenName = 'doc-comment';\n\n\t\tvar grammar = Prism.languages[lang];\n\t\tif (!grammar) {\n\t\t\treturn;\n\t\t}\n\t\tvar token = grammar[tokenName];\n\n\t\tif (!token) {\n\t\t\t// add doc comment: /** */\n\t\t\tvar definition = {};\n\t\t\tdefinition[tokenName] = {\n\t\t\t\tpattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'comment'\n\t\t\t};\n\n\t\t\tgrammar = Prism.languages.insertBefore(lang, 'comment', definition);\n\t\t\ttoken = grammar[tokenName];\n\t\t}\n\n\t\tif (token instanceof RegExp) { // convert regex to object\n\t\t\ttoken = grammar[tokenName] = { pattern: token };\n\t\t}\n\n\t\tif (Array.isArray(token)) {\n\t\t\tfor (var i = 0, l = token.length; i < l; i++) {\n\t\t\t\tif (token[i] instanceof RegExp) {\n\t\t\t\t\ttoken[i] = { pattern: token[i] };\n\t\t\t\t}\n\t\t\t\tcallback(token[i]);\n\t\t\t}\n\t\t} else {\n\t\t\tcallback(token);\n\t\t}\n\t}\n\n\t/**\n\t * Adds doc-comment support to the given languages for the given documentation language.\n\t *\n\t * @param {string[]|string} languages\n\t * @param {Object} docLanguage\n\t */\n\tfunction addSupport(languages, docLanguage) {\n\t\tif (typeof languages === 'string') {\n\t\t\tlanguages = [languages];\n\t\t}\n\n\t\tlanguages.forEach(function (lang) {\n\t\t\tdocCommentSupport(lang, function (pattern) {\n\t\t\t\tif (!pattern.inside) {\n\t\t\t\t\tpattern.inside = {};\n\t\t\t\t}\n\t\t\t\tpattern.inside.rest = docLanguage;\n\t\t\t});\n\t\t});\n\t}\n\n\tObject.defineProperty(javaDocLike, 'addSupport', { value: addSupport });\n\n\tjavaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike);\n\n}(Prism));\n"]}}