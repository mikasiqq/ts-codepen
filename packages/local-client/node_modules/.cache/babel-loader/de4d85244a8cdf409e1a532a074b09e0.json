{"ast":null,"code":"var _jsxFileName = \"/Users/gleb/Desktop/study/react/ts-codepen/src/components/CellList/CellListItem.tsx\";\nimport ActionBar from \"../ActionBar/ActionBar\";\nimport CodeWrapper from \"../CodeWrapper\";\nimport TextEditor from \"../TextEditor/TextEditor\";\nimport \"./CellListItem.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CellListItem = _ref => {\n  let {\n    cell\n  } = _ref;\n  let child;\n  if (cell.type === \"code\") {\n    child = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"actionBarWrapper\",\n        children: /*#__PURE__*/_jsxDEV(ActionBar, {\n          id: cell.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CodeWrapper, {\n        cell: cell\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  } else {\n    child = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(TextEditor, {\n        cell: cell\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ActionBar, {\n        id: cell.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cellListItem\",\n    children: [/*#__PURE__*/_jsxDEV(ActionBar, {\n      id: cell.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), child]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_c = CellListItem;\nexport default CellListItem;\nvar _c;\n$RefreshReg$(_c, \"CellListItem\");","map":{"version":3,"names":["ActionBar","CodeWrapper","TextEditor","CellListItem","cell","child","type","id"],"sources":["/Users/gleb/Desktop/study/react/ts-codepen/src/components/CellList/CellListItem.tsx"],"sourcesContent":["import { FC } from \"react\";\nimport { Cell } from \"../../store\";\nimport ActionBar from \"../ActionBar/ActionBar\";\nimport CodeWrapper from \"../CodeWrapper\";\nimport TextEditor from \"../TextEditor/TextEditor\";\nimport \"./CellListItem.css\";\n\ninterface CellListItemProps {\n  cell: Cell;\n}\n\nconst CellListItem: FC<CellListItemProps> = ({ cell }) => {\n  let child: JSX.Element;\n  if (cell.type === \"code\") {\n    child = (\n      <>\n        <div className=\"actionBarWrapper\">\n          <ActionBar id={cell.id} />\n        </div>\n        <CodeWrapper cell={cell} />\n      </>\n    );\n  } else {\n    child = (\n      <>\n        <TextEditor cell={cell} />\n        <ActionBar id={cell.id} />\n      </>\n    );\n  }\n\n  return (\n    <div className=\"cellListItem\">\n      <ActionBar id={cell.id} />\n      {child}\n    </div>\n  );\n};\n\nexport default CellListItem;\n"],"mappings":";AAEA,OAAOA,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,WAAW,MAAM,gBAAgB;AACxC,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAO,oBAAoB;AAAC;AAAA;AAM5B,MAAMC,YAAmC,GAAG,QAAc;EAAA,IAAb;IAAEC;EAAK,CAAC;EACnD,IAAIC,KAAkB;EACtB,IAAID,IAAI,CAACE,IAAI,KAAK,MAAM,EAAE;IACxBD,KAAK,gBACH;MAAA,wBACE;QAAK,SAAS,EAAC,kBAAkB;QAAA,uBAC/B,QAAC,SAAS;UAAC,EAAE,EAAED,IAAI,CAACG;QAAG;UAAA;UAAA;UAAA;QAAA;MAAG;QAAA;QAAA;QAAA;MAAA,QACtB,eACN,QAAC,WAAW;QAAC,IAAI,EAAEH;MAAK;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA,gBAE9B;EACH,CAAC,MAAM;IACLC,KAAK,gBACH;MAAA,wBACE,QAAC,UAAU;QAAC,IAAI,EAAED;MAAK;QAAA;QAAA;QAAA;MAAA,QAAG,eAC1B,QAAC,SAAS;QAAC,EAAE,EAAEA,IAAI,CAACG;MAAG;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA,gBAE7B;EACH;EAEA,oBACE;IAAK,SAAS,EAAC,cAAc;IAAA,wBAC3B,QAAC,SAAS;MAAC,EAAE,EAAEH,IAAI,CAACG;IAAG;MAAA;MAAA;MAAA;IAAA,QAAG,EACzBF,KAAK;EAAA;IAAA;IAAA;IAAA;EAAA,QACF;AAEV,CAAC;AAAC,KA1BIF,YAAmC;AA4BzC,eAAeA,YAAY;AAAC;AAAA"},"metadata":{},"sourceType":"module"}