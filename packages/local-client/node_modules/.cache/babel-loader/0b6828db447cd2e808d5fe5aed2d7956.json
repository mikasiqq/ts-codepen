{"ast":null,"code":"var _jsxFileName = \"/Users/gleb/Desktop/study/react/ts-prod/ts-codepen/packages/local-client/src/components/CodeEditor/CodeEditor.tsx\",\n  _s = $RefreshSig$();\nimport \"./CodeEditor.css\";\nimport \"./SyntaxHighlighting.css\";\nimport MonacoEditor from \"@monaco-editor/react\";\nimport { useRef } from \"react\";\nimport prettier from \"prettier\";\nimport parser from \"prettier/parser-babel\";\nimport codeShift from \"jscodeshift\";\nimport Highlighter from \"monaco-jsx-highlighter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodeEditor = _ref => {\n  _s();\n  let {\n    onChange,\n    initialValue\n  } = _ref;\n  const editorRef = useRef();\n  const onEditorDidMount = (getValue, monacoEditor) => {\n    var _monacoEditor$getMode;\n    editorRef.current = monacoEditor;\n    monacoEditor.onDidChangeModelContent(() => {\n      onChange(getValue());\n    });\n    (_monacoEditor$getMode = monacoEditor.getModel()) === null || _monacoEditor$getMode === void 0 ? void 0 : _monacoEditor$getMode.updateOptions({\n      tabSize: 2\n    });\n    const highlighter = new Highlighter(\n    // @ts-ignore\n    window.monaco, codeShift, monacoEditor);\n    highlighter.highLightOnDidChangeModelContent(() => {}, () => {}, undefined, () => {});\n  };\n  const onFormatClick = () => {\n    const unformatted = editorRef.current.getModel().getValue();\n    const formatted = prettier.format(unformatted, {\n      parser: \"babel\",\n      plugins: [parser],\n      useTabs: false,\n      semi: true,\n      singleQuote: true\n    }).replace(/\\n$/, \"\");\n    editorRef.current.setValue(formatted);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"editorWrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button button-format is-primary is-small\",\n      onClick: onFormatClick,\n      children: \"Prettier\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MonacoEditor, {\n      editorDidMount: onEditorDidMount,\n      value: initialValue,\n      language: \"javascript\",\n      theme: \"dark\",\n      options: {\n        wordWrap: \"on\",\n        minimap: {\n          enabled: false\n        },\n        showUnused: false,\n        folding: false,\n        lineNumbersMinChars: 3,\n        fontSize: 16,\n        scrollBeyondLastLine: false,\n        automaticLayout: true\n      },\n      height: \"100%\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(CodeEditor, \"U23Mj2fZUVBkuOSyNtK9IkK2H0s=\");\n_c = CodeEditor;\nexport default CodeEditor;\nvar _c;\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"names":["MonacoEditor","useRef","prettier","parser","codeShift","Highlighter","CodeEditor","onChange","initialValue","editorRef","onEditorDidMount","getValue","monacoEditor","current","onDidChangeModelContent","getModel","updateOptions","tabSize","highlighter","window","monaco","highLightOnDidChangeModelContent","undefined","onFormatClick","unformatted","formatted","format","plugins","useTabs","semi","singleQuote","replace","setValue","wordWrap","minimap","enabled","showUnused","folding","lineNumbersMinChars","fontSize","scrollBeyondLastLine","automaticLayout"],"sources":["/Users/gleb/Desktop/study/react/ts-prod/ts-codepen/packages/local-client/src/components/CodeEditor/CodeEditor.tsx"],"sourcesContent":["import \"./CodeEditor.css\";\nimport \"./SyntaxHighlighting.css\";\nimport MonacoEditor, { EditorDidMount } from \"@monaco-editor/react\";\nimport { FC, useRef } from \"react\";\nimport prettier from \"prettier\";\nimport parser from \"prettier/parser-babel\";\nimport codeShift from \"jscodeshift\";\nimport Highlighter from \"monaco-jsx-highlighter\";\n\ninterface CodeEditorProps {\n  initialValue: string;\n  onChange(value: string): void;\n}\n\nconst CodeEditor: FC<CodeEditorProps> = ({ onChange, initialValue }) => {\n  const editorRef = useRef<any>();\n\n  const onEditorDidMount: EditorDidMount = (getValue, monacoEditor) => {\n    editorRef.current = monacoEditor;\n\n    monacoEditor.onDidChangeModelContent(() => {\n      onChange(getValue());\n    });\n\n    monacoEditor.getModel()?.updateOptions({ tabSize: 2 });\n\n    const highlighter = new Highlighter(\n      // @ts-ignore\n      window.monaco,\n      codeShift,\n      monacoEditor\n    );\n    highlighter.highLightOnDidChangeModelContent(\n      () => {},\n      () => {},\n      undefined,\n      () => {}\n    );\n  };\n\n  const onFormatClick = () => {\n    const unformatted = editorRef.current.getModel().getValue();\n\n    const formatted = prettier\n      .format(unformatted, {\n        parser: \"babel\",\n        plugins: [parser],\n        useTabs: false,\n        semi: true,\n        singleQuote: true,\n      })\n      .replace(/\\n$/, \"\");\n\n    editorRef.current.setValue(formatted);\n  };\n\n  return (\n    <div className=\"editorWrapper\">\n      <button\n        className=\"button button-format is-primary is-small\"\n        onClick={onFormatClick}\n      >\n        Prettier\n      </button>\n      <MonacoEditor\n        editorDidMount={onEditorDidMount}\n        value={initialValue}\n        language=\"javascript\"\n        theme=\"dark\"\n        options={{\n          wordWrap: \"on\",\n          minimap: { enabled: false },\n          showUnused: false,\n          folding: false,\n          lineNumbersMinChars: 3,\n          fontSize: 16,\n          scrollBeyondLastLine: false,\n          automaticLayout: true,\n        }}\n        height=\"100%\"\n      />\n    </div>\n  );\n};\n\nexport default CodeEditor;\n"],"mappings":";;AAAA,OAAO,kBAAkB;AACzB,OAAO,0BAA0B;AACjC,OAAOA,YAAY,MAA0B,sBAAsB;AACnE,SAAaC,MAAM,QAAQ,OAAO;AAClC,OAAOC,QAAQ,MAAM,UAAU;AAC/B,OAAOC,MAAM,MAAM,uBAAuB;AAC1C,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,WAAW,MAAM,wBAAwB;AAAC;AAOjD,MAAMC,UAA+B,GAAG,QAAgC;EAAA;EAAA,IAA/B;IAAEC,QAAQ;IAAEC;EAAa,CAAC;EACjE,MAAMC,SAAS,GAAGR,MAAM,EAAO;EAE/B,MAAMS,gBAAgC,GAAG,CAACC,QAAQ,EAAEC,YAAY,KAAK;IAAA;IACnEH,SAAS,CAACI,OAAO,GAAGD,YAAY;IAEhCA,YAAY,CAACE,uBAAuB,CAAC,MAAM;MACzCP,QAAQ,CAACI,QAAQ,EAAE,CAAC;IACtB,CAAC,CAAC;IAEF,yBAAAC,YAAY,CAACG,QAAQ,EAAE,0DAAvB,sBAAyBC,aAAa,CAAC;MAAEC,OAAO,EAAE;IAAE,CAAC,CAAC;IAEtD,MAAMC,WAAW,GAAG,IAAIb,WAAW;IACjC;IACAc,MAAM,CAACC,MAAM,EACbhB,SAAS,EACTQ,YAAY,CACb;IACDM,WAAW,CAACG,gCAAgC,CAC1C,MAAM,CAAC,CAAC,EACR,MAAM,CAAC,CAAC,EACRC,SAAS,EACT,MAAM,CAAC,CAAC,CACT;EACH,CAAC;EAED,MAAMC,aAAa,GAAG,MAAM;IAC1B,MAAMC,WAAW,GAAGf,SAAS,CAACI,OAAO,CAACE,QAAQ,EAAE,CAACJ,QAAQ,EAAE;IAE3D,MAAMc,SAAS,GAAGvB,QAAQ,CACvBwB,MAAM,CAACF,WAAW,EAAE;MACnBrB,MAAM,EAAE,OAAO;MACfwB,OAAO,EAAE,CAACxB,MAAM,CAAC;MACjByB,OAAO,EAAE,KAAK;MACdC,IAAI,EAAE,IAAI;MACVC,WAAW,EAAE;IACf,CAAC,CAAC,CACDC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;IAErBtB,SAAS,CAACI,OAAO,CAACmB,QAAQ,CAACP,SAAS,CAAC;EACvC,CAAC;EAED,oBACE;IAAK,SAAS,EAAC,eAAe;IAAA,wBAC5B;MACE,SAAS,EAAC,0CAA0C;MACpD,OAAO,EAAEF,aAAc;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAGhB,eACT,QAAC,YAAY;MACX,cAAc,EAAEb,gBAAiB;MACjC,KAAK,EAAEF,YAAa;MACpB,QAAQ,EAAC,YAAY;MACrB,KAAK,EAAC,MAAM;MACZ,OAAO,EAAE;QACPyB,QAAQ,EAAE,IAAI;QACdC,OAAO,EAAE;UAAEC,OAAO,EAAE;QAAM,CAAC;QAC3BC,UAAU,EAAE,KAAK;QACjBC,OAAO,EAAE,KAAK;QACdC,mBAAmB,EAAE,CAAC;QACtBC,QAAQ,EAAE,EAAE;QACZC,oBAAoB,EAAE,KAAK;QAC3BC,eAAe,EAAE;MACnB,CAAE;MACF,MAAM,EAAC;IAAM;MAAA;MAAA;MAAA;IAAA,QACb;EAAA;IAAA;IAAA;IAAA;EAAA,QACE;AAEV,CAAC;AAAC,GArEInC,UAA+B;AAAA,KAA/BA,UAA+B;AAuErC,eAAeA,UAAU;AAAC;AAAA"},"metadata":{},"sourceType":"module"}