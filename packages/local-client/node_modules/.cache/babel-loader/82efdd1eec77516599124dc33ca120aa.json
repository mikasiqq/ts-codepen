{"ast":null,"code":"import produce from\"immer\";import{ActionType}from\"../action-types\";var initialState={loading:false,error:null,order:[],data:{}};var cellsReducer=produce(function(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case ActionType.UPDATE_CELL:var _action$payload=action.payload,id=_action$payload.id,content=_action$payload.content;state.data[id].content=content;return state;case ActionType.DELETE_CELL:delete state.data[action.payload];state.order=state.order.filter(function(id){return id!==action.payload;});return state;case ActionType.MOVE_CELL:var direction=action.payload.direction;var index=state.order.findIndex(function(id){return id===action.payload.id;});var targetId=direction===\"up\"?index-1:index+1;if(targetId<0||targetId>state.order.length-1){return state;}state.order[index]=state.order[targetId];state.order[targetId]=action.payload.id;return state;case ActionType.INSERT_CELL_AFTER:var cell={content:\"\",type:action.payload.type,id:randomId()};state.data[cell.id]=cell;var foundIndex=state.order.findIndex(function(id){return id===action.payload.id;});if(foundIndex<0){state.order.unshift(cell.id);}else{state.order.splice(foundIndex+1,0,cell.id);}return state;default:return state;}},initialState);var randomId=function randomId(){return Math.random().toString(36).substring(2,7);};export default cellsReducer;","map":{"version":3,"names":["produce","ActionType","initialState","loading","error","order","data","cellsReducer","state","action","type","UPDATE_CELL","payload","id","content","DELETE_CELL","filter","MOVE_CELL","direction","index","findIndex","targetId","length","INSERT_CELL_AFTER","cell","randomId","foundIndex","unshift","splice","Math","random","toString","substring"],"sources":["/Users/gleb/Desktop/study/react/ts-prod/ts-codepen/packages/local-client/src/store/reducers/cellsReducer.ts"],"sourcesContent":["import produce from \"immer\";\nimport { ActionType } from \"../action-types\";\nimport { Action } from \"../actions\";\nimport { Cell } from \"../cell\";\n\ninterface CellsState {\n  loading: boolean;\n  error: string | null;\n  order: string[];\n  data: {\n    [key: string]: Cell;\n  };\n}\n\nconst initialState: CellsState = {\n  loading: false,\n  error: null,\n  order: [],\n  data: {},\n};\n\nconst cellsReducer = produce(\n  (state: CellsState = initialState, action: Action) => {\n    switch (action.type) {\n      case ActionType.UPDATE_CELL:\n        const { id, content } = action.payload;\n\n        state.data[id].content = content;\n\n        return state;\n      case ActionType.DELETE_CELL:\n        delete state.data[action.payload];\n        state.order = state.order.filter((id) => id !== action.payload);\n\n        return state;\n      case ActionType.MOVE_CELL:\n        const { direction } = action.payload;\n        const index = state.order.findIndex((id) => id === action.payload.id);\n        const targetId = direction === \"up\" ? index - 1 : index + 1;\n\n        if (targetId < 0 || targetId > state.order.length - 1) {\n          return state;\n        }\n\n        state.order[index] = state.order[targetId];\n\n        state.order[targetId] = action.payload.id;\n\n        return state;\n      case ActionType.INSERT_CELL_AFTER:\n        const cell: Cell = {\n          content: \"\",\n          type: action.payload.type,\n          id: randomId(),\n        };\n\n        state.data[cell.id] = cell;\n\n        const foundIndex = state.order.findIndex(\n          (id) => id === action.payload.id\n        );\n\n        if (foundIndex < 0) {\n          state.order.unshift(cell.id);\n        } else {\n          state.order.splice(foundIndex + 1, 0, cell.id);\n        }\n\n        return state;\n      default:\n        return state;\n    }\n  },\n  initialState\n);\n\nconst randomId = () => {\n  return Math.random().toString(36).substring(2, 7);\n};\n\nexport default cellsReducer;\n"],"mappings":"AAAA,MAAOA,QAAO,KAAM,OAAO,CAC3B,OAASC,UAAU,KAAQ,iBAAiB,CAa5C,GAAMC,aAAwB,CAAG,CAC/BC,OAAO,CAAE,KAAK,CACdC,KAAK,CAAE,IAAI,CACXC,KAAK,CAAE,EAAE,CACTC,IAAI,CAAE,CAAC,CACT,CAAC,CAED,GAAMC,aAAY,CAAGP,OAAO,CAC1B,UAAsD,IAArDQ,MAAiB,2DAAGN,YAAY,IAAEO,OAAc,2CAC/C,OAAQA,MAAM,CAACC,IAAI,EACjB,IAAKT,WAAU,CAACU,WAAW,CACzB,oBAAwBF,MAAM,CAACG,OAAO,CAA9BC,EAAE,iBAAFA,EAAE,CAAEC,OAAO,iBAAPA,OAAO,CAEnBN,KAAK,CAACF,IAAI,CAACO,EAAE,CAAC,CAACC,OAAO,CAAGA,OAAO,CAEhC,MAAON,MAAK,CACd,IAAKP,WAAU,CAACc,WAAW,CACzB,MAAOP,MAAK,CAACF,IAAI,CAACG,MAAM,CAACG,OAAO,CAAC,CACjCJ,KAAK,CAACH,KAAK,CAAGG,KAAK,CAACH,KAAK,CAACW,MAAM,CAAC,SAACH,EAAE,QAAKA,GAAE,GAAKJ,MAAM,CAACG,OAAO,GAAC,CAE/D,MAAOJ,MAAK,CACd,IAAKP,WAAU,CAACgB,SAAS,CACvB,GAAQC,UAAS,CAAKT,MAAM,CAACG,OAAO,CAA5BM,SAAS,CACjB,GAAMC,MAAK,CAAGX,KAAK,CAACH,KAAK,CAACe,SAAS,CAAC,SAACP,EAAE,QAAKA,GAAE,GAAKJ,MAAM,CAACG,OAAO,CAACC,EAAE,GAAC,CACrE,GAAMQ,SAAQ,CAAGH,SAAS,GAAK,IAAI,CAAGC,KAAK,CAAG,CAAC,CAAGA,KAAK,CAAG,CAAC,CAE3D,GAAIE,QAAQ,CAAG,CAAC,EAAIA,QAAQ,CAAGb,KAAK,CAACH,KAAK,CAACiB,MAAM,CAAG,CAAC,CAAE,CACrD,MAAOd,MAAK,CACd,CAEAA,KAAK,CAACH,KAAK,CAACc,KAAK,CAAC,CAAGX,KAAK,CAACH,KAAK,CAACgB,QAAQ,CAAC,CAE1Cb,KAAK,CAACH,KAAK,CAACgB,QAAQ,CAAC,CAAGZ,MAAM,CAACG,OAAO,CAACC,EAAE,CAEzC,MAAOL,MAAK,CACd,IAAKP,WAAU,CAACsB,iBAAiB,CAC/B,GAAMC,KAAU,CAAG,CACjBV,OAAO,CAAE,EAAE,CACXJ,IAAI,CAAED,MAAM,CAACG,OAAO,CAACF,IAAI,CACzBG,EAAE,CAAEY,QAAQ,EACd,CAAC,CAEDjB,KAAK,CAACF,IAAI,CAACkB,IAAI,CAACX,EAAE,CAAC,CAAGW,IAAI,CAE1B,GAAME,WAAU,CAAGlB,KAAK,CAACH,KAAK,CAACe,SAAS,CACtC,SAACP,EAAE,QAAKA,GAAE,GAAKJ,MAAM,CAACG,OAAO,CAACC,EAAE,GACjC,CAED,GAAIa,UAAU,CAAG,CAAC,CAAE,CAClBlB,KAAK,CAACH,KAAK,CAACsB,OAAO,CAACH,IAAI,CAACX,EAAE,CAAC,CAC9B,CAAC,IAAM,CACLL,KAAK,CAACH,KAAK,CAACuB,MAAM,CAACF,UAAU,CAAG,CAAC,CAAE,CAAC,CAAEF,IAAI,CAACX,EAAE,CAAC,CAChD,CAEA,MAAOL,MAAK,CACd,QACE,MAAOA,MAAK,CAAC,CAEnB,CAAC,CACDN,YAAY,CACb,CAED,GAAMuB,SAAQ,CAAG,QAAXA,SAAQ,EAAS,CACrB,MAAOI,KAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,CAAE,CAAC,CAAC,CACnD,CAAC,CAED,cAAezB,aAAY"},"metadata":{},"sourceType":"module"}