{"ast":null,"code":"import { ActionType } from \"../action-types\";\nimport bundle from \"../../bundler\";\nimport axios from \"axios\";\nexport const updateCell = (id, content) => {\n  return {\n    type: ActionType.UPDATE_CELL,\n    payload: {\n      id,\n      content\n    }\n  };\n};\nexport const deleteCell = id => {\n  return {\n    type: ActionType.DELETE_CELL,\n    payload: id\n  };\n};\nexport const moveCell = (id, direction) => {\n  return {\n    type: ActionType.MOVE_CELL,\n    payload: {\n      id,\n      direction\n    }\n  };\n};\nexport const insertCellAfter = (id, cellType) => {\n  return {\n    type: ActionType.INSERT_CELL_AFTER,\n    payload: {\n      id,\n      type: cellType\n    }\n  };\n};\nexport const createBundle = (cellId, input) => {\n  return async dispatch => {\n    dispatch({\n      type: ActionType.BUNDLE_START,\n      payload: {\n        cellId\n      }\n    });\n    const result = await bundle(input);\n    dispatch({\n      type: ActionType.BUNDLE_COMPLETE,\n      payload: {\n        cellId,\n        bundle: result\n      }\n    });\n  };\n};\nexport const fetchCells = () => {\n  return async dispatch => {\n    dispatch({\n      type: ActionType.FETCH_CELLS\n    });\n    try {\n      const {\n        data\n      } = axios.get(\"/cells\");\n    } catch (err) {}\n  };\n};","map":{"version":3,"names":["ActionType","bundle","axios","updateCell","id","content","type","UPDATE_CELL","payload","deleteCell","DELETE_CELL","moveCell","direction","MOVE_CELL","insertCellAfter","cellType","INSERT_CELL_AFTER","createBundle","cellId","input","dispatch","BUNDLE_START","result","BUNDLE_COMPLETE","fetchCells","FETCH_CELLS","data","get","err"],"sources":["/Users/gleb/Desktop/study/react/ts-prod/ts-codepen/packages/local-client/src/store/action-creators/index.ts"],"sourcesContent":["import { ActionType } from \"../action-types\";\nimport { CellTypes } from \"../cell\";\nimport {\n  UpdateCellAction,\n  DeleteCellAction,\n  MoveCellAction,\n  InsertCellAfterAction,\n  Direction,\n  Action,\n} from \"../actions\";\nimport bundle from \"../../bundler\";\nimport { Dispatch } from \"redux\";\nimport axios from \"axios\";\n\nexport const updateCell = (id: string, content: string): UpdateCellAction => {\n  return {\n    type: ActionType.UPDATE_CELL,\n    payload: {\n      id,\n      content,\n    },\n  };\n};\n\nexport const deleteCell = (id: string): DeleteCellAction => {\n  return {\n    type: ActionType.DELETE_CELL,\n    payload: id,\n  };\n};\n\nexport const moveCell = (id: string, direction: Direction): MoveCellAction => {\n  return {\n    type: ActionType.MOVE_CELL,\n    payload: {\n      id,\n      direction,\n    },\n  };\n};\n\nexport const insertCellAfter = (\n  id: string | null,\n  cellType: CellTypes\n): InsertCellAfterAction => {\n  return {\n    type: ActionType.INSERT_CELL_AFTER,\n    payload: {\n      id,\n      type: cellType,\n    },\n  };\n};\n\nexport const createBundle = (cellId: string, input: string) => {\n  return async (dispatch: Dispatch<Action>) => {\n    dispatch({\n      type: ActionType.BUNDLE_START,\n      payload: {\n        cellId,\n      },\n    });\n\n    const result = await bundle(input);\n\n    dispatch({\n      type: ActionType.BUNDLE_COMPLETE,\n      payload: {\n        cellId,\n        bundle: result,\n      },\n    });\n  };\n};\n\nexport const fetchCells = () => {\n  return async (dispatch: Dispatch<Action>) => {\n    dispatch({ type: ActionType.FETCH_CELLS });\n\n    try {\n      const { data } = axios.get(\"/cells\");\n    } catch (err) {}\n  };\n};\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,iBAAiB;AAU5C,OAAOC,MAAM,MAAM,eAAe;AAElC,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,UAAU,GAAG,CAACC,EAAU,EAAEC,OAAe,KAAuB;EAC3E,OAAO;IACLC,IAAI,EAAEN,UAAU,CAACO,WAAW;IAC5BC,OAAO,EAAE;MACPJ,EAAE;MACFC;IACF;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMI,UAAU,GAAIL,EAAU,IAAuB;EAC1D,OAAO;IACLE,IAAI,EAAEN,UAAU,CAACU,WAAW;IAC5BF,OAAO,EAAEJ;EACX,CAAC;AACH,CAAC;AAED,OAAO,MAAMO,QAAQ,GAAG,CAACP,EAAU,EAAEQ,SAAoB,KAAqB;EAC5E,OAAO;IACLN,IAAI,EAAEN,UAAU,CAACa,SAAS;IAC1BL,OAAO,EAAE;MACPJ,EAAE;MACFQ;IACF;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAME,eAAe,GAAG,CAC7BV,EAAiB,EACjBW,QAAmB,KACO;EAC1B,OAAO;IACLT,IAAI,EAAEN,UAAU,CAACgB,iBAAiB;IAClCR,OAAO,EAAE;MACPJ,EAAE;MACFE,IAAI,EAAES;IACR;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAME,YAAY,GAAG,CAACC,MAAc,EAAEC,KAAa,KAAK;EAC7D,OAAO,MAAOC,QAA0B,IAAK;IAC3CA,QAAQ,CAAC;MACPd,IAAI,EAAEN,UAAU,CAACqB,YAAY;MAC7Bb,OAAO,EAAE;QACPU;MACF;IACF,CAAC,CAAC;IAEF,MAAMI,MAAM,GAAG,MAAMrB,MAAM,CAACkB,KAAK,CAAC;IAElCC,QAAQ,CAAC;MACPd,IAAI,EAAEN,UAAU,CAACuB,eAAe;MAChCf,OAAO,EAAE;QACPU,MAAM;QACNjB,MAAM,EAAEqB;MACV;IACF,CAAC,CAAC;EACJ,CAAC;AACH,CAAC;AAED,OAAO,MAAME,UAAU,GAAG,MAAM;EAC9B,OAAO,MAAOJ,QAA0B,IAAK;IAC3CA,QAAQ,CAAC;MAAEd,IAAI,EAAEN,UAAU,CAACyB;IAAY,CAAC,CAAC;IAE1C,IAAI;MACF,MAAM;QAAEC;MAAK,CAAC,GAAGxB,KAAK,CAACyB,GAAG,CAAC,QAAQ,CAAC;IACtC,CAAC,CAAC,OAAOC,GAAG,EAAE,CAAC;EACjB,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module"}