{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useTypedSelector } from \"./useTypedSelector\";\nexport const useCumulativeCode = cellId => {\n  _s();\n  return useTypedSelector(state => {\n    const {\n      data,\n      order\n    } = state.cells;\n    const orderedCells = order.map(id => data[id]);\n    const showFunc = `\n    import _React from 'react';\n    import _ReactDOM from 'react-dom';\n    var show = (value) => {\n      const root = document.querySelector(\"#root\");\n\n      if (typeof value === 'object') {\n        if (value.$$typeof && value.props) {\n          _ReactDOM.render(value, root);\n        } else {\n          root.innerHTML = JSON.stringify(value);\n        }\n      } else {\n        root .innerHTML = value;\n      }\n    };\n  `;\n    const showFuncNoop = \"var show = () => {}\";\n    const cumulativeCode = [];\n    for (let c of orderedCells) {\n      if (c.type === \"code\") {\n        if (c.id === cellId) {\n          cumulativeCode.push(showFunc);\n        } else {\n          cumulativeCode.push(showFuncNoop);\n        }\n        cumulativeCode.push(c.content);\n      }\n      if (c.id === cellId) {\n        break;\n      }\n    }\n    return cumulativeCode;\n  }).join(\"\\n\");\n};\n_s(useCumulativeCode, \"4E8l+eUOHjvoqwxLSolHjmdFz+I=\", false, function () {\n  return [useTypedSelector];\n});","map":{"version":3,"names":["useTypedSelector","useCumulativeCode","cellId","state","data","order","cells","orderedCells","map","id","showFunc","showFuncNoop","cumulativeCode","c","type","push","content","join"],"sources":["/Users/gleb/Desktop/study/react/ts-codepen/src/hooks/useCumulativeCode.ts"],"sourcesContent":["import { useTypedSelector } from \"./useTypedSelector\";\n\nexport const useCumulativeCode = (cellId: string) => {\n  return useTypedSelector((state) => {\n    const { data, order } = state.cells;\n    const orderedCells = order.map((id) => data[id]);\n\n    const showFunc = `\n    import _React from 'react';\n    import _ReactDOM from 'react-dom';\n    var show = (value) => {\n      const root = document.querySelector(\"#root\");\n\n      if (typeof value === 'object') {\n        if (value.$$typeof && value.props) {\n          _ReactDOM.render(value, root);\n        } else {\n          root.innerHTML = JSON.stringify(value);\n        }\n      } else {\n        root .innerHTML = value;\n      }\n    };\n  `;\n\n    const showFuncNoop = \"var show = () => {}\";\n\n    const cumulativeCode = [];\n    for (let c of orderedCells) {\n      if (c.type === \"code\") {\n        if (c.id === cellId) {\n          cumulativeCode.push(showFunc);\n        } else {\n          cumulativeCode.push(showFuncNoop);\n        }\n        cumulativeCode.push(c.content);\n      }\n      if (c.id === cellId) {\n        break;\n      }\n    }\n    return cumulativeCode;\n  }).join(\"\\n\");\n};\n"],"mappings":";AAAA,SAASA,gBAAgB,QAAQ,oBAAoB;AAErD,OAAO,MAAMC,iBAAiB,GAAIC,MAAc,IAAK;EAAA;EACnD,OAAOF,gBAAgB,CAAEG,KAAK,IAAK;IACjC,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,KAAK,CAACG,KAAK;IACnC,MAAMC,YAAY,GAAGF,KAAK,CAACG,GAAG,CAAEC,EAAE,IAAKL,IAAI,CAACK,EAAE,CAAC,CAAC;IAEhD,MAAMC,QAAQ,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;IAEC,MAAMC,YAAY,GAAG,qBAAqB;IAE1C,MAAMC,cAAc,GAAG,EAAE;IACzB,KAAK,IAAIC,CAAC,IAAIN,YAAY,EAAE;MAC1B,IAAIM,CAAC,CAACC,IAAI,KAAK,MAAM,EAAE;QACrB,IAAID,CAAC,CAACJ,EAAE,KAAKP,MAAM,EAAE;UACnBU,cAAc,CAACG,IAAI,CAACL,QAAQ,CAAC;QAC/B,CAAC,MAAM;UACLE,cAAc,CAACG,IAAI,CAACJ,YAAY,CAAC;QACnC;QACAC,cAAc,CAACG,IAAI,CAACF,CAAC,CAACG,OAAO,CAAC;MAChC;MACA,IAAIH,CAAC,CAACJ,EAAE,KAAKP,MAAM,EAAE;QACnB;MACF;IACF;IACA,OAAOU,cAAc;EACvB,CAAC,CAAC,CAACK,IAAI,CAAC,IAAI,CAAC;AACf,CAAC;AAAC,GAzCWhB,iBAAiB;EAAA,QACrBD,gBAAgB;AAAA"},"metadata":{},"sourceType":"module"}