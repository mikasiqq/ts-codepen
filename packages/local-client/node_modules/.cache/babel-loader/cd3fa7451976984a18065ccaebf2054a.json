{"ast":null,"code":"import produce from \"immer\";\nimport { ActionType } from \"../action-types\";\nconst initialState = {\n  loading: false,\n  error: null,\n  order: [],\n  data: {}\n};\nconst cellsReducer = produce(function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case ActionType.UPDATE_CELL:\n      const {\n        id,\n        content\n      } = action.payload;\n      state.data[id].content = content;\n      return;\n    case ActionType.DELETE_CELL:\n      delete state.data[action.payload];\n      state.order = state.order.filter(id => id !== action.payload);\n      return;\n    case ActionType.MOVE_CELL:\n      const {\n        direction\n      } = action.payload;\n      const index = state.order.findIndex(id => id === action.payload.id);\n      const targetId = direction === \"up\" ? index - 1 : index + 1;\n      if (targetId < 0 || targetId > state.order.length - 1) {\n        return;\n      }\n      state.order[index] = state.order[targetId];\n      state.order[targetId] = action.payload.id;\n      return;\n    case ActionType.INSERT_CELL_BEFORE:\n      const cell = {\n        content: \"\",\n        type: action.payload.type,\n        id: \"\"\n      };\n      return;\n    default:\n      return state;\n  }\n});\nconst randomId = () => {\n  return Math.random().toString(36);\n};\nexport default cellsReducer;","map":{"version":3,"names":["produce","ActionType","initialState","loading","error","order","data","cellsReducer","state","action","type","UPDATE_CELL","id","content","payload","DELETE_CELL","filter","MOVE_CELL","direction","index","findIndex","targetId","length","INSERT_CELL_BEFORE","cell","randomId","Math","random","toString"],"sources":["/Users/gleb/Desktop/study/react/ts-codepen/src/store/reducers/cellsReducer.ts"],"sourcesContent":["import produce from \"immer\";\nimport { ActionType } from \"../action-types\";\nimport { Action } from \"../actions\";\nimport { Cell } from \"../cell\";\n\ninterface CellsState {\n  loading: boolean;\n  error: string | null;\n  order: string[];\n  data: {\n    [key: string]: Cell;\n  };\n}\n\nconst initialState: CellsState = {\n  loading: false,\n  error: null,\n  order: [],\n  data: {},\n};\n\nconst cellsReducer = produce(\n  (state: CellsState = initialState, action: Action) => {\n    switch (action.type) {\n      case ActionType.UPDATE_CELL:\n        const { id, content } = action.payload;\n\n        state.data[id].content = content;\n        return;\n      case ActionType.DELETE_CELL:\n        delete state.data[action.payload];\n        state.order = state.order.filter((id) => id !== action.payload);\n\n        return;\n      case ActionType.MOVE_CELL:\n        const { direction } = action.payload;\n        const index = state.order.findIndex((id) => id === action.payload.id);\n        const targetId = direction === \"up\" ? index - 1 : index + 1;\n\n        if (targetId < 0 || targetId > state.order.length - 1) {\n          return;\n        }\n\n        state.order[index] = state.order[targetId];\n\n        state.order[targetId] = action.payload.id;\n\n        return;\n      case ActionType.INSERT_CELL_BEFORE:\n        const cell: Cell = {\n          content: \"\",\n          type: action.payload.type,\n          id: \"\",\n        };\n\n        return;\n      default:\n        return state;\n    }\n  }\n);\n\nconst randomId = () => {\n  return Math.random().toString(36);\n};\n\nexport default cellsReducer;\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,OAAO;AAC3B,SAASC,UAAU,QAAQ,iBAAiB;AAa5C,MAAMC,YAAwB,GAAG;EAC/BC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,IAAI;EACXC,KAAK,EAAE,EAAE;EACTC,IAAI,EAAE,CAAC;AACT,CAAC;AAED,MAAMC,YAAY,GAAGP,OAAO,CAC1B,YAAsD;EAAA,IAArDQ,KAAiB,uEAAGN,YAAY;EAAA,IAAEO,MAAc;EAC/C,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKT,UAAU,CAACU,WAAW;MACzB,MAAM;QAAEC,EAAE;QAAEC;MAAQ,CAAC,GAAGJ,MAAM,CAACK,OAAO;MAEtCN,KAAK,CAACF,IAAI,CAACM,EAAE,CAAC,CAACC,OAAO,GAAGA,OAAO;MAChC;IACF,KAAKZ,UAAU,CAACc,WAAW;MACzB,OAAOP,KAAK,CAACF,IAAI,CAACG,MAAM,CAACK,OAAO,CAAC;MACjCN,KAAK,CAACH,KAAK,GAAGG,KAAK,CAACH,KAAK,CAACW,MAAM,CAAEJ,EAAE,IAAKA,EAAE,KAAKH,MAAM,CAACK,OAAO,CAAC;MAE/D;IACF,KAAKb,UAAU,CAACgB,SAAS;MACvB,MAAM;QAAEC;MAAU,CAAC,GAAGT,MAAM,CAACK,OAAO;MACpC,MAAMK,KAAK,GAAGX,KAAK,CAACH,KAAK,CAACe,SAAS,CAAER,EAAE,IAAKA,EAAE,KAAKH,MAAM,CAACK,OAAO,CAACF,EAAE,CAAC;MACrE,MAAMS,QAAQ,GAAGH,SAAS,KAAK,IAAI,GAAGC,KAAK,GAAG,CAAC,GAAGA,KAAK,GAAG,CAAC;MAE3D,IAAIE,QAAQ,GAAG,CAAC,IAAIA,QAAQ,GAAGb,KAAK,CAACH,KAAK,CAACiB,MAAM,GAAG,CAAC,EAAE;QACrD;MACF;MAEAd,KAAK,CAACH,KAAK,CAACc,KAAK,CAAC,GAAGX,KAAK,CAACH,KAAK,CAACgB,QAAQ,CAAC;MAE1Cb,KAAK,CAACH,KAAK,CAACgB,QAAQ,CAAC,GAAGZ,MAAM,CAACK,OAAO,CAACF,EAAE;MAEzC;IACF,KAAKX,UAAU,CAACsB,kBAAkB;MAChC,MAAMC,IAAU,GAAG;QACjBX,OAAO,EAAE,EAAE;QACXH,IAAI,EAAED,MAAM,CAACK,OAAO,CAACJ,IAAI;QACzBE,EAAE,EAAE;MACN,CAAC;MAED;IACF;MACE,OAAOJ,KAAK;EAAC;AAEnB,CAAC,CACF;AAED,MAAMiB,QAAQ,GAAG,MAAM;EACrB,OAAOC,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC;AACnC,CAAC;AAED,eAAerB,YAAY"},"metadata":{},"sourceType":"module"}