{"ast":null,"code":"var _jsxFileName = \"/Users/gleb/Desktop/study/react/ts-codepen/src/components/CellList/CellList.tsx\",\n  _s = $RefreshSig$();\nimport { useTypedSelector } from \"../../hooks/useTypedSelector\";\nimport AddCell from \"../AddCell/AddCell\";\nimport CellListItem from \"./CellListItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CellList = () => {\n  _s();\n  const cells = useTypedSelector(_ref => {\n    let {\n      cells: {\n        order,\n        data\n      }\n    } = _ref;\n    return order.map(id => data[id]);\n  });\n  const renderedCells = cells.map(cell => /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AddCell, {\n      nextCellId: cell.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CellListItem, {\n      cell: cell\n    }, cell.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: renderedCells\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 10\n  }, this);\n};\n_s(CellList, \"ij3ho+NMbIxaBKnXgl+evU0tiZI=\", false, function () {\n  return [useTypedSelector];\n});\n_c = CellList;\nexport default CellList;\nvar _c;\n$RefreshReg$(_c, \"CellList\");","map":{"version":3,"names":["useTypedSelector","AddCell","CellListItem","CellList","cells","order","data","map","id","renderedCells","cell"],"sources":["/Users/gleb/Desktop/study/react/ts-codepen/src/components/CellList/CellList.tsx"],"sourcesContent":["import { FC } from \"react\";\nimport { useTypedSelector } from \"../../hooks/useTypedSelector\";\nimport AddCell from \"../AddCell/AddCell\";\nimport CellListItem from \"./CellListItem\";\n\nconst CellList: FC = () => {\n  const cells = useTypedSelector(({ cells: { order, data } }) =>\n    order.map((id) => data[id])\n  );\n\n  const renderedCells = cells.map((cell) => (\n    <>\n      <AddCell nextCellId={cell.id} />\n      <CellListItem key={cell.id} cell={cell} />\n    </>\n  ));\n\n  return <div>{renderedCells}</div>;\n};\n\nexport default CellList;\n"],"mappings":";;AACA,SAASA,gBAAgB,QAAQ,8BAA8B;AAC/D,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,YAAY,MAAM,gBAAgB;AAAC;AAAA;AAE1C,MAAMC,QAAY,GAAG,MAAM;EAAA;EACzB,MAAMC,KAAK,GAAGJ,gBAAgB,CAAC;IAAA,IAAC;MAAEI,KAAK,EAAE;QAAEC,KAAK;QAAEC;MAAK;IAAE,CAAC;IAAA,OACxDD,KAAK,CAACE,GAAG,CAAEC,EAAE,IAAKF,IAAI,CAACE,EAAE,CAAC,CAAC;EAAA,EAC5B;EAED,MAAMC,aAAa,GAAGL,KAAK,CAACG,GAAG,CAAEG,IAAI,iBACnC;IAAA,wBACE,QAAC,OAAO;MAAC,UAAU,EAAEA,IAAI,CAACF;IAAG;MAAA;MAAA;MAAA;IAAA,QAAG,eAChC,QAAC,YAAY;MAAe,IAAI,EAAEE;IAAK,GAApBA,IAAI,CAACF,EAAE;MAAA;MAAA;MAAA;IAAA,QAAgB;EAAA,gBAE7C,CAAC;EAEF,oBAAO;IAAA,UAAMC;EAAa;IAAA;IAAA;IAAA;EAAA,QAAO;AACnC,CAAC;AAAC,GAbIN,QAAY;EAAA,QACFH,gBAAgB;AAAA;AAAA,KAD1BG,QAAY;AAelB,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module"}