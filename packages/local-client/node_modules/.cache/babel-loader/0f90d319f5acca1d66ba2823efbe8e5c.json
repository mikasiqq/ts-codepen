{"ast":null,"code":"import produce from \"immer\";\nimport { ActionType } from \"../action-types\";\nconst initialState = {\n  loading: false,\n  error: null,\n  order: [],\n  data: {}\n};\nconst cellsReducer = produce(function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case ActionType.FETCH_CELLS:\n      return state;\n    case ActionType.FETCH_CELLS_COMPLETE:\n      return state;\n    case ActionType.FETCH_CELLS_ERROR:\n      return state;\n    case ActionType.UPDATE_CELL:\n      const {\n        id,\n        content\n      } = action.payload;\n      state.data[id].content = content;\n      return state;\n    case ActionType.DELETE_CELL:\n      delete state.data[action.payload];\n      state.order = state.order.filter(id => id !== action.payload);\n      return state;\n    case ActionType.MOVE_CELL:\n      const {\n        direction\n      } = action.payload;\n      const index = state.order.findIndex(id => id === action.payload.id);\n      const targetId = direction === \"up\" ? index - 1 : index + 1;\n      if (targetId < 0 || targetId > state.order.length - 1) {\n        return state;\n      }\n      state.order[index] = state.order[targetId];\n      state.order[targetId] = action.payload.id;\n      return state;\n    case ActionType.INSERT_CELL_AFTER:\n      const cell = {\n        content: \"\",\n        type: action.payload.type,\n        id: randomId()\n      };\n      state.data[cell.id] = cell;\n      const foundIndex = state.order.findIndex(id => id === action.payload.id);\n      if (foundIndex < 0) {\n        state.order.unshift(cell.id);\n      } else {\n        state.order.splice(foundIndex + 1, 0, cell.id);\n      }\n      return state;\n    default:\n      return state;\n  }\n}, initialState);\nconst randomId = () => {\n  return Math.random().toString(36).substring(2, 7);\n};\nexport default cellsReducer;","map":{"version":3,"names":["produce","ActionType","initialState","loading","error","order","data","cellsReducer","state","action","type","FETCH_CELLS","FETCH_CELLS_COMPLETE","FETCH_CELLS_ERROR","UPDATE_CELL","id","content","payload","DELETE_CELL","filter","MOVE_CELL","direction","index","findIndex","targetId","length","INSERT_CELL_AFTER","cell","randomId","foundIndex","unshift","splice","Math","random","toString","substring"],"sources":["/Users/gleb/Desktop/study/react/ts-prod/ts-codepen/packages/local-client/src/store/reducers/cellsReducer.ts"],"sourcesContent":["import produce from \"immer\";\nimport { ActionType } from \"../action-types\";\nimport { Action } from \"../actions\";\nimport { Cell } from \"../cell\";\n\ninterface CellsState {\n  loading: boolean;\n  error: string | null;\n  order: string[];\n  data: {\n    [key: string]: Cell;\n  };\n}\n\nconst initialState: CellsState = {\n  loading: false,\n  error: null,\n  order: [],\n  data: {},\n};\n\nconst cellsReducer = produce(\n  (state: CellsState = initialState, action: Action) => {\n    switch (action.type) {\n      case ActionType.FETCH_CELLS:\n        return state;\n\n      case ActionType.FETCH_CELLS_COMPLETE:\n        return state;\n\n      case ActionType.FETCH_CELLS_ERROR:\n        return state;\n\n      case ActionType.UPDATE_CELL:\n        const { id, content } = action.payload;\n\n        state.data[id].content = content;\n\n        return state;\n      case ActionType.DELETE_CELL:\n        delete state.data[action.payload];\n        state.order = state.order.filter((id) => id !== action.payload);\n\n        return state;\n      case ActionType.MOVE_CELL:\n        const { direction } = action.payload;\n        const index = state.order.findIndex((id) => id === action.payload.id);\n        const targetId = direction === \"up\" ? index - 1 : index + 1;\n\n        if (targetId < 0 || targetId > state.order.length - 1) {\n          return state;\n        }\n\n        state.order[index] = state.order[targetId];\n\n        state.order[targetId] = action.payload.id;\n\n        return state;\n      case ActionType.INSERT_CELL_AFTER:\n        const cell: Cell = {\n          content: \"\",\n          type: action.payload.type,\n          id: randomId(),\n        };\n\n        state.data[cell.id] = cell;\n\n        const foundIndex = state.order.findIndex(\n          (id) => id === action.payload.id\n        );\n\n        if (foundIndex < 0) {\n          state.order.unshift(cell.id);\n        } else {\n          state.order.splice(foundIndex + 1, 0, cell.id);\n        }\n\n        return state;\n      default:\n        return state;\n    }\n  },\n  initialState\n);\n\nconst randomId = () => {\n  return Math.random().toString(36).substring(2, 7);\n};\n\nexport default cellsReducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}