{"ast":null,"code":"var _jsxFileName = \"/Users/gleb/Desktop/study/react/ts-codepen/src/components/TextEditor/TextEditor.tsx\",\n  _s = $RefreshSig$();\nimport MDEditor from \"@uiw/react-md-editor\";\nimport \"./TextEditor.css\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { useActions } from \"../../hooks/useActions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextEditor = _ref => {\n  _s();\n  let {\n    cell\n  } = _ref;\n  const editorRef = useRef(null);\n  const [editing, setEditing] = useState(false);\n  const {\n    updateCell\n  } = useActions();\n  useEffect(() => {\n    const listener = event => {\n      if (editorRef.current && event.target && editorRef.current.contains(event.target)) {\n        return;\n      }\n      setEditing(false);\n    };\n    document.addEventListener(\"click\", listener, {\n      capture: true\n    });\n    return () => {\n      document.removeEventListener(\"click\", listener, {\n        capture: true\n      });\n    };\n  }, []);\n  if (editing) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"textEditor\",\n      ref: editorRef,\n      children: /*#__PURE__*/_jsxDEV(MDEditor, {\n        value: cell.content,\n        onChange: v => updateCell(cell.id, v || \"\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"textEditor card\",\n    onClick: () => setEditing(true),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-content\",\n      children: /*#__PURE__*/_jsxDEV(MDEditor.Markdown, {\n        source: cell.content || \"Редактирование\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(TextEditor, \"vblbeBUBpi7Yv5ucOVnVXRfU9EY=\", false, function () {\n  return [useActions];\n});\n_c = TextEditor;\nexport default TextEditor;\nvar _c;\n$RefreshReg$(_c, \"TextEditor\");","map":{"version":3,"names":["MDEditor","useEffect","useRef","useState","useActions","TextEditor","cell","editorRef","editing","setEditing","updateCell","listener","event","current","target","contains","document","addEventListener","capture","removeEventListener","content","v","id"],"sources":["/Users/gleb/Desktop/study/react/ts-codepen/src/components/TextEditor/TextEditor.tsx"],"sourcesContent":["import MDEditor from \"@uiw/react-md-editor\";\nimport \"./TextEditor.css\";\nimport { FC, useEffect, useRef, useState } from \"react\";\nimport { Cell } from \"../../store/cell\";\nimport { useActions } from \"../../hooks/useActions\";\n\ninterface TextEditorProps {\n  cell: Cell;\n}\n\nconst TextEditor: FC<TextEditorProps> = ({ cell }) => {\n  const editorRef = useRef<HTMLDivElement | null>(null);\n  const [editing, setEditing] = useState(false);\n  const { updateCell } = useActions();\n\n  useEffect(() => {\n    const listener = (event: MouseEvent) => {\n      if (\n        editorRef.current &&\n        event.target &&\n        editorRef.current.contains(event.target as Node)\n      ) {\n        return;\n      }\n      setEditing(false);\n    };\n    document.addEventListener(\"click\", listener, { capture: true });\n\n    return () => {\n      document.removeEventListener(\"click\", listener, { capture: true });\n    };\n  }, []);\n\n  if (editing) {\n    return (\n      <div className=\"textEditor\" ref={editorRef}>\n        <MDEditor\n          value={cell.content}\n          onChange={(v) => updateCell(cell.id, v || \"\")}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"textEditor card\" onClick={() => setEditing(true)}>\n      <div className=\"card-content\">\n        <MDEditor.Markdown source={cell.content || \"Редактирование\"} />\n      </div>\n    </div>\n  );\n};\n\nexport default TextEditor;\n"],"mappings":";;AAAA,OAAOA,QAAQ,MAAM,sBAAsB;AAC3C,OAAO,kBAAkB;AACzB,SAAaC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAEvD,SAASC,UAAU,QAAQ,wBAAwB;AAAC;AAMpD,MAAMC,UAA+B,GAAG,QAAc;EAAA;EAAA,IAAb;IAAEC;EAAK,CAAC;EAC/C,MAAMC,SAAS,GAAGL,MAAM,CAAwB,IAAI,CAAC;EACrD,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM;IAAEO;EAAW,CAAC,GAAGN,UAAU,EAAE;EAEnCH,SAAS,CAAC,MAAM;IACd,MAAMU,QAAQ,GAAIC,KAAiB,IAAK;MACtC,IACEL,SAAS,CAACM,OAAO,IACjBD,KAAK,CAACE,MAAM,IACZP,SAAS,CAACM,OAAO,CAACE,QAAQ,CAACH,KAAK,CAACE,MAAM,CAAS,EAChD;QACA;MACF;MACAL,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC;IACDO,QAAQ,CAACC,gBAAgB,CAAC,OAAO,EAAEN,QAAQ,EAAE;MAAEO,OAAO,EAAE;IAAK,CAAC,CAAC;IAE/D,OAAO,MAAM;MACXF,QAAQ,CAACG,mBAAmB,CAAC,OAAO,EAAER,QAAQ,EAAE;QAAEO,OAAO,EAAE;MAAK,CAAC,CAAC;IACpE,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIV,OAAO,EAAE;IACX,oBACE;MAAK,SAAS,EAAC,YAAY;MAAC,GAAG,EAAED,SAAU;MAAA,uBACzC,QAAC,QAAQ;QACP,KAAK,EAAED,IAAI,CAACc,OAAQ;QACpB,QAAQ,EAAGC,CAAC,IAAKX,UAAU,CAACJ,IAAI,CAACgB,EAAE,EAAED,CAAC,IAAI,EAAE;MAAE;QAAA;QAAA;QAAA;MAAA;IAC9C;MAAA;MAAA;MAAA;IAAA,QACE;EAEV;EAEA,oBACE;IAAK,SAAS,EAAC,iBAAiB;IAAC,OAAO,EAAE,MAAMZ,UAAU,CAAC,IAAI,CAAE;IAAA,uBAC/D;MAAK,SAAS,EAAC,cAAc;MAAA,uBAC3B,QAAC,QAAQ,CAAC,QAAQ;QAAC,MAAM,EAAEH,IAAI,CAACc,OAAO,IAAI;MAAiB;QAAA;QAAA;QAAA;MAAA;IAAG;MAAA;MAAA;MAAA;IAAA;EAC3D;IAAA;IAAA;IAAA;EAAA,QACF;AAEV,CAAC;AAAC,GAzCIf,UAA+B;EAAA,QAGZD,UAAU;AAAA;AAAA,KAH7BC,UAA+B;AA2CrC,eAAeA,UAAU;AAAC;AAAA"},"metadata":{},"sourceType":"module"}