{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/esm/createSuper\";\nimport React, { Component } from 'react';\nimport classnames from 'classnames';\nimport Prism from 'prismjs';\nimport 'prismjs/components/prism-markdown.js';\nimport hotkeys from './hotkeys';\nimport \"./index.css\";\nvar TextArea = /*#__PURE__*/function (_Component) {\n  _inherits(TextArea, _Component);\n  var _super = _createSuper(TextArea);\n  function TextArea(props) {\n    var _this;\n    _classCallCheck(this, TextArea);\n    _this = _super.call(this, props);\n    _this.preElm = /*#__PURE__*/React.createRef();\n    _this.warp = /*#__PURE__*/React.createRef();\n    _this.text = /*#__PURE__*/React.createRef();\n    _this.state = {\n      value: props.value || ''\n    };\n    return _this;\n  }\n  _createClass(TextArea, [{\n    key: \"handleChange\",\n    value: function handleChange(e) {\n      var _this2 = this;\n      var onChange = this.props.onChange;\n      this.setState({\n        value: e.target.value\n      }, function () {\n        onChange && onChange(_this2.state.value);\n        _this2.highlight();\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.props.autoFocus && this.text.current) {\n                  this.text.current.focus();\n                }\n                this.highlight();\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n      return componentDidMount;\n    }()\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      return nextProps.value !== this.props.value || nextState.value !== this.state.value;\n    }\n  }, {\n    key: \"highlight\",\n    value: function () {\n      var _highlight = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var value, pre, html;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                value = this.state.value;\n                pre = this.preElm.current;\n                html = Prism.highlight(value, Prism.languages.markdown, 'markdown');\n                pre.innerHTML = \"\".concat(html, \"<br />\");\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function highlight() {\n        return _highlight.apply(this, arguments);\n      }\n      return highlight;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        prefixCls = _this$props.prefixCls,\n        className = _this$props.className,\n        onChange = _this$props.onChange,\n        onScroll = _this$props.onScroll,\n        tabSize = _this$props.tabSize,\n        style = _this$props.style,\n        otherProps = _objectWithoutProperties(_this$props, [\"prefixCls\", \"className\", \"onChange\", \"onScroll\", \"tabSize\", \"style\"]);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.warp,\n        className: classnames(\"\".concat(prefixCls, \"-aree\"), className),\n        onScroll: onScroll\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classnames(\"\".concat(prefixCls, \"-text\"))\n      }, /*#__PURE__*/React.createElement(\"pre\", {\n        ref: this.preElm,\n        className: classnames(\"\".concat(prefixCls, \"-text-pre\"), 'wmde-markdown-color')\n      }), /*#__PURE__*/React.createElement(\"textarea\", _extends({}, otherProps, {\n        ref: this.text,\n        onKeyDown: hotkeys.bind(this, {\n          tabSize: tabSize\n        }),\n        className: \"\".concat(prefixCls, \"-text-input\"),\n        value: this.state.value,\n        onChange: this.handleChange.bind(this)\n      }))));\n    }\n  }]);\n  return TextArea;\n}(Component);\nTextArea.defaultProps = {\n  tabSize: 2,\n  autoFocus: true,\n  spellCheck: false\n};\nTextArea.state = void 0;\nexport { TextArea as default };","map":{"version":3,"mappings":"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","names":["React","Component","classnames","Prism","hotkeys","TextArea","props","_classCallCheck","_this","preElm","createRef","warp","text","state","value","e","onChange","setState","target","_this2","highlight","autoFocus","current","focus","nextProps","nextState","pre","html","languages","markdown","innerHTML","prefixCls","className","onScroll","tabSize","style","otherProps","ref","onKeyDown","bind","handleChange","defaultProps","spellCheck"],"sources":["../../../../src/components/TextArea/index.tsx"],"sourcesContent":["import React, { Component } from 'react';\nimport classnames from 'classnames';\nimport Prism from 'prismjs';\nimport 'prismjs/components/prism-markdown.js';\nimport { IProps } from '../../utils';\nimport hotkeys, { IHotkeyOptions } from './hotkeys';\nimport './index.less';\n\nexport interface ITextAreaProps extends Omit<React.TextareaHTMLAttributes<HTMLTextAreaElement>, 'value' | 'onChange' | 'onScroll'>, IProps {\n  onChange?: (value?: string) => void;\n  onScroll?: (e: React.UIEvent<HTMLDivElement>) => void;\n  value?: string;\n  tabSize?: number;\n}\n\nexport interface ITextAreaState {\n  value?: string;\n}\n\nexport default class TextArea extends Component<ITextAreaProps, ITextAreaState> {\n  public preElm = React.createRef<HTMLPreElement>();\n  public warp = React.createRef<HTMLDivElement>();\n  public text = React.createRef<HTMLTextAreaElement>();\n  public static defaultProps: ITextAreaProps = {\n    tabSize: 2,\n    autoFocus: true,\n    spellCheck: false,\n  }\n  public static state: ITextAreaState;\n  public constructor(props: ITextAreaProps) {\n    super(props);\n    this.state = {\n      value: props.value || '',\n    };\n  }\n  private handleChange(e: React.ChangeEvent<HTMLTextAreaElement>) {\n    const { onChange } = this.props;\n    this.setState({ value: e.target.value }, () => {\n      onChange && onChange(this.state.value);\n      this.highlight();\n    });\n  }\n  public async componentDidMount() {\n    if (this.props.autoFocus && this.text.current) {\n      this.text.current.focus();\n    }\n    this.highlight();\n  }\n  public shouldComponentUpdate(nextProps: ITextAreaProps, nextState: ITextAreaState) {\n    return nextProps.value !== this.props.value || nextState.value !== this.state.value;\n  }\n  public async highlight() {\n    const { value } = this.state;\n    const pre = this.preElm.current;\n    const html = Prism.highlight(value as string, Prism.languages.markdown, 'markdown');\n    pre!.innerHTML = `${html}<br />`;\n  }\n  render() {\n    const { prefixCls, className, onChange, onScroll, tabSize, style, ...otherProps } = this.props;\n    return (\n      <div ref={this.warp} className={classnames(`${prefixCls}-aree`, className)} onScroll={onScroll}>\n        <div className={classnames(`${prefixCls}-text`)}>\n          <pre\n            ref={this.preElm}\n            className={classnames(`${prefixCls}-text-pre`, 'wmde-markdown-color')}\n          />\n          <textarea\n            {...otherProps}\n            ref={this.text}\n            onKeyDown={hotkeys.bind(this, { tabSize } as IHotkeyOptions)}\n            className={`${prefixCls}-text-input`}\n            value={this.state.value}\n            onChange={this.handleChange.bind(this)}\n          />\n        </div>\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}