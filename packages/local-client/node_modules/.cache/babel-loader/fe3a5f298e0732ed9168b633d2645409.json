{"ast":null,"code":"import produce from \"immer\";\nimport { ActionType } from \"../action-types\";\nconst initialState = {\n  loading: false,\n  error: null,\n  order: [],\n  data: {\n    Cell: {\n      id: \"dsfos\",\n      type: \"code\",\n      content: \"const a =1\"\n    }\n  }\n};\nconst cellsReducer = produce(function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case ActionType.UPDATE_CELL:\n      const {\n        id,\n        content\n      } = action.payload;\n      state.data[id].content = content;\n      return state;\n    case ActionType.DELETE_CELL:\n      delete state.data[action.payload];\n      state.order = state.order.filter(id => id !== action.payload);\n      return state;\n    case ActionType.MOVE_CELL:\n      const {\n        direction\n      } = action.payload;\n      const index = state.order.findIndex(id => id === action.payload.id);\n      const targetId = direction === \"up\" ? index - 1 : index + 1;\n      if (targetId < 0 || targetId > state.order.length - 1) {\n        return state;\n      }\n      state.order[index] = state.order[targetId];\n      state.order[targetId] = action.payload.id;\n      return state;\n    case ActionType.INSERT_CELL_BEFORE:\n      const cell = {\n        content: \"\",\n        type: action.payload.type,\n        id: randomId()\n      };\n      state.data[cell.id] = cell;\n      const foundIndex = state.order.findIndex(id => id === action.payload.id);\n      if (foundIndex < 0) {\n        state.order.push(cell.id);\n      } else {\n        state.order.splice(foundIndex, 0, cell.id);\n      }\n      return state;\n    default:\n      return state;\n  }\n}, initialState);\nconst randomId = () => {\n  return Math.random().toString(36).substring(2, 7);\n};\nexport default cellsReducer;","map":{"version":3,"names":["produce","ActionType","initialState","loading","error","order","data","Cell","id","type","content","cellsReducer","state","action","UPDATE_CELL","payload","DELETE_CELL","filter","MOVE_CELL","direction","index","findIndex","targetId","length","INSERT_CELL_BEFORE","cell","randomId","foundIndex","push","splice","Math","random","toString","substring"],"sources":["/Users/gleb/Desktop/study/react/ts-codepen/src/store/reducers/cellsReducer.ts"],"sourcesContent":["import produce from \"immer\";\nimport { ActionType } from \"../action-types\";\nimport { Action } from \"../actions\";\nimport { Cell } from \"../cell\";\n\ninterface CellsState {\n  loading: boolean;\n  error: string | null;\n  order: string[];\n  data: {\n    [key: string]: Cell;\n  };\n}\n\nconst initialState: CellsState = {\n  loading: false,\n  error: null,\n  order: [],\n  data: {\n    Cell: {\n      id: \"dsfos\",\n      type: \"code\",\n      content: \"const a =1\",\n    },\n  },\n};\n\nconst cellsReducer = produce(\n  (state: CellsState = initialState, action: Action) => {\n    switch (action.type) {\n      case ActionType.UPDATE_CELL:\n        const { id, content } = action.payload;\n\n        state.data[id].content = content;\n\n        return state;\n      case ActionType.DELETE_CELL:\n        delete state.data[action.payload];\n        state.order = state.order.filter((id) => id !== action.payload);\n\n        return state;\n      case ActionType.MOVE_CELL:\n        const { direction } = action.payload;\n        const index = state.order.findIndex((id) => id === action.payload.id);\n        const targetId = direction === \"up\" ? index - 1 : index + 1;\n\n        if (targetId < 0 || targetId > state.order.length - 1) {\n          return state;\n        }\n\n        state.order[index] = state.order[targetId];\n\n        state.order[targetId] = action.payload.id;\n\n        return state;\n      case ActionType.INSERT_CELL_BEFORE:\n        const cell: Cell = {\n          content: \"\",\n          type: action.payload.type,\n          id: randomId(),\n        };\n\n        state.data[cell.id] = cell;\n\n        const foundIndex = state.order.findIndex(\n          (id) => id === action.payload.id\n        );\n\n        if (foundIndex < 0) {\n          state.order.push(cell.id);\n        } else {\n          state.order.splice(foundIndex, 0, cell.id);\n        }\n\n        return state;\n      default:\n        return state;\n    }\n  },\n  initialState\n);\n\nconst randomId = () => {\n  return Math.random().toString(36).substring(2, 7);\n};\n\nexport default cellsReducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}