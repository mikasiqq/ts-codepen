{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/gleb/Desktop/study/react/ts-prod/ts-codepen/packages/local-client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import{useTypedSelector}from\"./useTypedSelector\";export var useCumulativeCode=function useCumulativeCode(cellId){return useTypedSelector(function(state){var _state$cells=state.cells,data=_state$cells.data,order=_state$cells.order;var orderedCells=order.map(function(id){return data[id];});var showFunc=\"\\n    import _React from 'react';\\n    import _ReactDOM from 'react-dom';\\n    var show = (value) => {\\n      const root = document.querySelector(\\\"#root\\\");\\n\\n      if (typeof value === 'object') {\\n        if (value.$$typeof && value.props) {\\n          _ReactDOM.render(value, root);\\n        } else {\\n          root.innerHTML = JSON.stringify(value);\\n        }\\n      } else {\\n        root .innerHTML = value;\\n      }\\n    };\\n  \";var showFuncNoop=\"var show = () => {}\";var cumulativeCode=[];var _iterator=_createForOfIteratorHelper(orderedCells),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var c=_step.value;if(c.type===\"code\"){if(c.id===cellId){cumulativeCode.push(showFunc);}else{cumulativeCode.push(showFuncNoop);}cumulativeCode.push(c.content);}if(c.id===cellId){break;}}}catch(err){_iterator.e(err);}finally{_iterator.f();}return cumulativeCode;}).join(\"\\n\");};","map":{"version":3,"names":["useTypedSelector","useCumulativeCode","cellId","state","cells","data","order","orderedCells","map","id","showFunc","showFuncNoop","cumulativeCode","c","type","push","content","join"],"sources":["/Users/gleb/Desktop/study/react/ts-prod/ts-codepen/packages/local-client/src/hooks/useCumulativeCode.ts"],"sourcesContent":["import { useTypedSelector } from \"./useTypedSelector\";\n\nexport const useCumulativeCode = (cellId: string) => {\n  return useTypedSelector((state) => {\n    const { data, order } = state.cells;\n    const orderedCells = order.map((id) => data[id]);\n\n    const showFunc = `\n    import _React from 'react';\n    import _ReactDOM from 'react-dom';\n    var show = (value) => {\n      const root = document.querySelector(\"#root\");\n\n      if (typeof value === 'object') {\n        if (value.$$typeof && value.props) {\n          _ReactDOM.render(value, root);\n        } else {\n          root.innerHTML = JSON.stringify(value);\n        }\n      } else {\n        root .innerHTML = value;\n      }\n    };\n  `;\n\n    const showFuncNoop = \"var show = () => {}\";\n\n    const cumulativeCode = [];\n    for (let c of orderedCells) {\n      if (c.type === \"code\") {\n        if (c.id === cellId) {\n          cumulativeCode.push(showFunc);\n        } else {\n          cumulativeCode.push(showFuncNoop);\n        }\n        cumulativeCode.push(c.content);\n      }\n      if (c.id === cellId) {\n        break;\n      }\n    }\n    return cumulativeCode;\n  }).join(\"\\n\");\n};\n"],"mappings":"sLAAA,OAASA,gBAAgB,KAAQ,oBAAoB,CAErD,MAAO,IAAMC,kBAAiB,CAAG,QAApBA,kBAAiB,CAAIC,MAAc,CAAK,CACnD,MAAOF,iBAAgB,CAAC,SAACG,KAAK,CAAK,CACjC,iBAAwBA,KAAK,CAACC,KAAK,CAA3BC,IAAI,cAAJA,IAAI,CAAEC,KAAK,cAALA,KAAK,CACnB,GAAMC,aAAY,CAAGD,KAAK,CAACE,GAAG,CAAC,SAACC,EAAE,QAAKJ,KAAI,CAACI,EAAE,CAAC,GAAC,CAEhD,GAAMC,SAAQ,ybAgBf,CAEC,GAAMC,aAAY,CAAG,qBAAqB,CAE1C,GAAMC,eAAc,CAAG,EAAE,CAAC,yCACZL,YAAY,YAA1B,+CAA4B,IAAnBM,EAAC,aACR,GAAIA,CAAC,CAACC,IAAI,GAAK,MAAM,CAAE,CACrB,GAAID,CAAC,CAACJ,EAAE,GAAKP,MAAM,CAAE,CACnBU,cAAc,CAACG,IAAI,CAACL,QAAQ,CAAC,CAC/B,CAAC,IAAM,CACLE,cAAc,CAACG,IAAI,CAACJ,YAAY,CAAC,CACnC,CACAC,cAAc,CAACG,IAAI,CAACF,CAAC,CAACG,OAAO,CAAC,CAChC,CACA,GAAIH,CAAC,CAACJ,EAAE,GAAKP,MAAM,CAAE,CACnB,MACF,CACF,CAAC,qDACD,MAAOU,eAAc,CACvB,CAAC,CAAC,CAACK,IAAI,CAAC,IAAI,CAAC,CACf,CAAC"},"metadata":{},"sourceType":"module"}