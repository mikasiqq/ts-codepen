{"ast":null,"code":"import produce from \"immer\";\nimport { ActionType } from \"../action-types\";\nconst initialState = {\n  loading: false,\n  error: null,\n  order: [],\n  data: {}\n};\nconst cellsReducer = produce(function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case ActionType.FETCH_CELLS:\n      state.loading = true;\n      state.error = null;\n      return state;\n    case ActionType.FETCH_CELLS_COMPLETE:\n      state.order = action.payload.map(cell => cell.id);\n      return state;\n    case ActionType.FETCH_CELLS_ERROR:\n      state.loading = false;\n      state.error = action.payload;\n      return state;\n    case ActionType.UPDATE_CELL:\n      const {\n        id,\n        content\n      } = action.payload;\n      state.data[id].content = content;\n      return state;\n    case ActionType.DELETE_CELL:\n      delete state.data[action.payload];\n      state.order = state.order.filter(id => id !== action.payload);\n      return state;\n    case ActionType.MOVE_CELL:\n      const {\n        direction\n      } = action.payload;\n      const index = state.order.findIndex(id => id === action.payload.id);\n      const targetId = direction === \"up\" ? index - 1 : index + 1;\n      if (targetId < 0 || targetId > state.order.length - 1) {\n        return state;\n      }\n      state.order[index] = state.order[targetId];\n      state.order[targetId] = action.payload.id;\n      return state;\n    case ActionType.INSERT_CELL_AFTER:\n      const cell = {\n        content: \"\",\n        type: action.payload.type,\n        id: randomId()\n      };\n      state.data[cell.id] = cell;\n      const foundIndex = state.order.findIndex(id => id === action.payload.id);\n      if (foundIndex < 0) {\n        state.order.unshift(cell.id);\n      } else {\n        state.order.splice(foundIndex + 1, 0, cell.id);\n      }\n      return state;\n    default:\n      return state;\n  }\n}, initialState);\nconst randomId = () => {\n  return Math.random().toString(36).substring(2, 7);\n};\nexport default cellsReducer;","map":{"version":3,"names":["produce","ActionType","initialState","loading","error","order","data","cellsReducer","state","action","type","FETCH_CELLS","FETCH_CELLS_COMPLETE","payload","map","cell","id","FETCH_CELLS_ERROR","UPDATE_CELL","content","DELETE_CELL","filter","MOVE_CELL","direction","index","findIndex","targetId","length","INSERT_CELL_AFTER","randomId","foundIndex","unshift","splice","Math","random","toString","substring"],"sources":["/Users/gleb/Desktop/study/react/ts-prod/ts-codepen/packages/local-client/src/store/reducers/cellsReducer.ts"],"sourcesContent":["import produce from \"immer\";\nimport { ActionType } from \"../action-types\";\nimport { Action } from \"../actions\";\nimport { Cell } from \"../cell\";\n\ninterface CellsState {\n  loading: boolean;\n  error: string | null;\n  order: string[];\n  data: {\n    [key: string]: Cell;\n  };\n}\n\nconst initialState: CellsState = {\n  loading: false,\n  error: null,\n  order: [],\n  data: {},\n};\n\nconst cellsReducer = produce(\n  (state: CellsState = initialState, action: Action) => {\n    switch (action.type) {\n      case ActionType.FETCH_CELLS:\n        state.loading = true;\n        state.error = null;\n\n        return state;\n      case ActionType.FETCH_CELLS_COMPLETE:\n        state.order = action.payload.map((cell) => cell.id);\n\n        return state;\n      case ActionType.FETCH_CELLS_ERROR:\n        state.loading = false;\n        state.error = action.payload;\n\n        return state;\n\n      case ActionType.UPDATE_CELL:\n        const { id, content } = action.payload;\n\n        state.data[id].content = content;\n\n        return state;\n      case ActionType.DELETE_CELL:\n        delete state.data[action.payload];\n        state.order = state.order.filter((id) => id !== action.payload);\n\n        return state;\n      case ActionType.MOVE_CELL:\n        const { direction } = action.payload;\n        const index = state.order.findIndex((id) => id === action.payload.id);\n        const targetId = direction === \"up\" ? index - 1 : index + 1;\n\n        if (targetId < 0 || targetId > state.order.length - 1) {\n          return state;\n        }\n\n        state.order[index] = state.order[targetId];\n\n        state.order[targetId] = action.payload.id;\n\n        return state;\n      case ActionType.INSERT_CELL_AFTER:\n        const cell: Cell = {\n          content: \"\",\n          type: action.payload.type,\n          id: randomId(),\n        };\n\n        state.data[cell.id] = cell;\n\n        const foundIndex = state.order.findIndex(\n          (id) => id === action.payload.id\n        );\n\n        if (foundIndex < 0) {\n          state.order.unshift(cell.id);\n        } else {\n          state.order.splice(foundIndex + 1, 0, cell.id);\n        }\n\n        return state;\n      default:\n        return state;\n    }\n  },\n  initialState\n);\n\nconst randomId = () => {\n  return Math.random().toString(36).substring(2, 7);\n};\n\nexport default cellsReducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}